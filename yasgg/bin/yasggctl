#!/usr/bin/env python
#-*- coding: utf-8 -*-
"""
YASGG - Yet another static gallery generator. CLI.

Usage: yasggctl build -i <photos-import-dir> [-t <theme>] [-p <password>] [-r <recrusive>]
       yasggctl serve [-o <port>] [-b <bind>]
       yasggctl [-h] [-v]


Build command:
  Creates a new album in the current working directory.
  Example: yasggctl build --recrusive 1 --photos-import-dir ./tests/sample --theme default

  -i <photos-import-dir>, --photos-import-dir <photos-import-dir>   Directory of photos to import.
  -p <password>, --password <password>                              Use encryption of images. Use a _STRONG_ password!
  -r {0,1}, --recrusive                                             Search recrusive for photos into --photos-import-dir [default: 0]
  -t {default, galleria_classic}, --theme                           The theme to use. [default: default]


Serve command:
  Serves a created album.
  Example: yasggctl serve -o 9000 -b 0.0.0.0

  -o <port>, --port <port>                                          Name of the new album. [default: 9000]
  -b <bind>, --bind <bind>                                          Address to run the test server on [default: 127.0.0.1]


Global options:
  -h, --help                                                        Show this help message and exit.
  -v, --version                                                     Show program's version number and exit.
"""
import sys
import os
import codecs
from shutil import copytree

import time

from docopt import docopt
from jinja2 import Template
import SimpleHTTPServer
import webbrowser

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)) + os.sep + '..' + os.sep + '..' + os.sep)

from yasgg import get_version
from yasgg import logger
from yasgg.album import Album
from yasgg.theme import Theme
from yasgg.server import ThreadingSimpleServer


class Commands(object):
    def __init__(self, args):
        if args['build']:
            self.build(args)
        elif args['serve']:
            self.serve(args)

    def build(self, args):
        use_encryption = bool(args['--password'])
        if use_encryption and len(args['--password']) < 8:
            logger.error('Password is too short. Use min 8 characters.')
            return

        import_dir = args['--photos-import-dir']
        if not os.path.exists(import_dir):
            logger.error('The directory to import (%s) does not exist. No album creation is possible and I\'ve to exit' % import_dir)
            return

        # Create list of directories to import / albums to create
        import_dirs = []

        # Check if import directory has sub folders
        import_tree = [x for x in os.walk(import_dir)]
        import_sub_dirs = import_tree[0][1]
        if import_sub_dirs:
            for sub_dir in import_sub_dirs:
                import_dirs.append(os.path.join(import_dir, sub_dir))
        else:
            import_dirs.append(import_dir)

        for import_dir in import_dirs:
            album = Album(import_dir=import_dir)
            album.import_photos()
            album.create_zipped_version()

            theme = Theme(args['--theme'])
            template = Template(codecs.open(theme.template, 'r', 'utf8').read())

            # Copy theme data
            copytree(theme.basedir, os.path.join(album.base_dir, 'assets'))

            # Copy asset data needed for all themes
            assets_dir_for_all = '%s%s' % (os.path.join(theme.basedir, '..', '_assets_for_all_themes'), os.sep)
            copytree(assets_dir_for_all, '%s%s' % (album.base_dir, 'assets/crypto'))

            # Write html file
            with open(album.html_file, 'wb') as html_file:
                logger.info('Writing html file %s' % album.html_file)
                html = template.render(album=album, timestamp=int(time.time()))
                html_file.write(html.encode('utf-8'))

    def serve(self, args):
        server = ThreadingSimpleServer((args['--bind'], int(args['--port'])), SimpleHTTPServer.SimpleHTTPRequestHandler)
        browser_host = args['--bind']
        if args['--bind'] == '0.0.0.0':
            browser_host = '127.0.0.1'
        webbrowser.open_new_tab('http://%s:%s/' % (browser_host, args['--port']))
        try:
            while 1:
                sys.stdout.flush()
                server.handle_request()
        except KeyboardInterrupt:
            pass

args = docopt(__doc__, sys.argv[1:], version=get_version())
Commands(args)