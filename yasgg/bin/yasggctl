#!/usr/bin/env python
#-*- coding: utf-8 -*-
"""
YASGG - Yet another static gallery generator. CLI.

Usage: yasggctl init
       yasggctl add -i <photos-import-dir>
       yasggctl list
       yasggctl delete -s <album-slug>
       yasggctl build
       yasggctl serve [-o <port>] [-b <bind>]
       yasggctl [-h] [-v]

Init command:
  Initializes a new gallery in the current working directory.

Add command:
  Adds one or more directories with photos to gallery.

  -i <photos-import-dir>, --photos-import-dir <photos-import-dir>   Directory of photos to import.

List command:
  Lists all known albums of this gallery.

Build command:
  Creates the html fot the gallery.

Serve command:
  Serves a created album.
  Example: yasggctl serve -o 9000 -b 0.0.0.0

  -o <port>, --port <port>                                          Name of the new album. [default: 9000]
  -b <bind>, --bind <bind>                                          Address to run the test server on [default: 127.0.0.1]


Global options:
  -h, --help                                                        Show this help message and exit.
  -v, --version                                                     Show program's version number and exit.
"""
import sys
import os

from docopt import docopt
import SimpleHTTPServer
import webbrowser

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)) + os.sep + '..' + os.sep + '..' + os.sep)

from yasgg import get_version
from yasgg import logger
from yasgg.gallery import initialize_gallery, Gallery
from yasgg.album import Album
from yasgg.server import ThreadingSimpleServer


class Commands(object):
    def __init__(self, args):
        if args['init']:
            self.init_gallery()
        elif args['add']:
            self.add_albums(args)
        elif args['list']:
            self.list_albums()
        elif args['delete']:
            self.delete_album(args)
        elif args['build']:
            self.build()
        elif args['serve']:
            self.serve(args)

    def init_gallery(self):
        """ Create gallery (write config file and album json) and return. """
        initialize_gallery()

    def add_albums(self, args):
        import_dir = args['--photos-import-dir']
        if not os.path.exists(import_dir):
            logger.error('The directory to import (%s) does not exist. No album creation is possible and I\'ve to exit.' % import_dir)
            return

        # Get gallery
        gallery = Gallery()

        # Create list of directories to import / albums to create
        import_dirs = []

        # Check if import directory has sub folders; if yes, make several albums
        import_tree = [x for x in os.walk(import_dir)]
        import_sub_dirs = import_tree[0][1]
        if import_sub_dirs:
            for sub_dir in import_sub_dirs:
                import_dirs.append(os.path.join(import_dir, sub_dir))
        else:
            import_dirs.append(import_dir)

        # Create albums
        for import_dir in import_dirs:
            album = Album(import_dir=import_dir)
            if album.slug in gallery.albums:
                choice = raw_input("A album named '%s' already exists in this gallery.\n"
                                   "Do you want to replace the existing one? Y/N [N]: " % album.slug)
                choice = choice or 'N'
                if choice == 'N':
                    continue

            album.get_photos_to_import()
            album.import_photos()
            #album.create_zipped_version()
            gallery.add_album(album)

        # Update persistent album data.
        gallery.write_album_data_to_disk()

    def list_albums(self):
        gallery = Gallery()
        gallery.list_albums()

    def delete_album(self, args):
        album_to_delete = args['<album-slug>']
        gallery = Gallery()
        gallery.delete_album(album_to_delete)

    def build(self):
        gallery = Gallery()
        gallery.write_gallery()

    def serve(self, args):
        server = ThreadingSimpleServer((args['--bind'], int(args['--port'])), SimpleHTTPServer.SimpleHTTPRequestHandler)
        browser_host = args['--bind']
        if args['--bind'] == '0.0.0.0':
            browser_host = '127.0.0.1'
        webbrowser.open_new_tab('http://%s:%s/' % (browser_host, args['--port']))
        try:
            while 1:
                sys.stdout.flush()
                server.handle_request()
        except KeyboardInterrupt:
            pass

args = docopt(__doc__, sys.argv[1:], version=get_version())
Commands(args)